// Generated by CoffeeScript 1.10.0
(function() {
  var entries, feedparser, feeds, node_promise, promises, request;

  var FeedParser = require('feedparser');
  
  request = require('request');

  //node_promise = require('node-promise');
  

  feeds = ['http://phiary.me/rss','http://srad.jp/sradjp.rss'];

  entries = [];
  
  var promises;
  var feedArticleTitles = []
  var feedArticlelinks = []
  var feedSiteName = []
  
  promises = feeds.map(function(feedUrl){
  return new Promise(function(onFulfilled, onRejected) {

    var req = request(feedUrl);  
    var feedparser = new FeedParser({});
    
    var items = [];
    var articleTitles = [];
    var articleLinks = [];
    
    req.on('error', function (error) {
      // handle any request errors
      console.log('Errrrrrrrrrrr')
    });
    
    req.on('response', function (res) {  
      this.pipe(feedparser);
    });
    
    feedparser.on('meta', function(meta) {  
      console.log('==== %s ====', meta.title);
      feedSiteName.push(meta.title)
    });
    
    feedparser.on('readable', function() {  
      while(item = this.read()) {
        // console.log(item);
        items.push(item);
        articleTitles.push(item.title)
        articleLinks.push(item.link)
      }
    });
    
    feedparser.on('end', function() {  
      // show titles
      items.forEach(function(item) {
        //console.log('- [' + item.title + ']' + '(' + item.link + ')');
      });
      feedArticleTitles.push(articleTitles)
      feedArticlelinks.push(articleLinks)
      onFulfilled(items);
      
      return items
    });
    
    })
    
  })
  

  //取得したFeedのサイト名と記事名とその記事へのリンクを
  Promise.all(promises).then(function (d) {
    //console.log("aaa")
    //console.log(d)
    
    //console.log(feedSiteName)
    //console.log(feedArticleTitles)
    //console.log(feedArticlelinks)
    feedSiteName.forEach(function(site) {
      index = feedSiteName.indexOf(site)
      console.log(site)
      console.log(index)
      feedArticleTitles[index].forEach(function printFeedArticle(feedtitle) {
        console.log(feedtitle)
        linkindex = feedArticleTitles[index].indexOf(feedtitle)
        //console.log(linkindex)
        articleOfSite = feedArticlelinks[index];
        //console.log(feedArticlelinks[index])
        console.log(articleOfSite[linkindex])
      })
    })
  })
  
  
  
  
  /*
  
  promises = feeds.map(function(url) {
    var deferred;
    deferred = node_promise.defer();
    var feedparser = new FeedParser({});
    var items = new Array;
    var req = request(url)
    var item;
    
    req.on('response', function (res) {  
      this.pipe(feedparser);
    });
    
    feedparser.on('meta', function(meta) {  
      console.log('==== %s ====', meta.title);
    });
    
    feedparser.on('readable', function() {  
      while(item = this.read()) {
        // console.log(item);
        items.push(item);
      }
    });
    
    feedparser.on('end', function() {  
      // show titles
      items.forEach(function(item) {
        console.log('- [' + item.title + ']' + '(' + item.link + ')');
      });
      deferred.resolve.bind(deferred)
    });
    
    feedparser.on('data', entries.push.bind(entries))
    

    
  });

  node_promise.when(node_promise.all(promises), function() {
    return entries.forEach(function(entry) {
      
      console.log(entry)
    });
  });


*/
  
  
  
  /*

  promises = feeds.map(function(url) {
    var feedparser = new FeedParser({});
    var item;
    var items = [];
    var deferred;
    deferred = node_promise.defer();
  
    //var req = request(url).pipe(new feedparser([]))
    var req = request(url); 
    req.on('response', function (res) {  
      this.pipe(feedparser);
    });
    feedparser.on('readable', function() {
      while(item = this.read()) {
      //console.log(item);
      items.push(item);
      }
    });
    
    feedparser.on('meta', function(meta) {  
      console.log('==== %s ====', meta.title);
    });
    
    feedparser.on('error', console.log.bind(console)).on('data', entries.push.bind(entries)).on('end', deferred.resolve.bind(deferred));


    

    //feedparser.on('end', deferred.resolve.bind(deferred));
    
    


    return deferred.promise;
  });
  


  node_promise.when(node_promise.all(promises), function() {
    return entries.forEach(function(entry) {
        console.log(entry)
    });
  });
*/
}).call(this);
